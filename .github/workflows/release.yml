name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test & Build (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install --no-package-lock --prefer-offline

      - name: Setup Ollama embedding model
        run: |
          # Wait for Ollama to be ready
          timeout 60 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 2; done'
          # Pull a lightweight embedding model for testing
          curl -X POST http://localhost:11434/api/pull -d '{"name": "all-minilm:latest"}' -H "Content-Type: application/json"
          # Wait for model to be ready
          timeout 120 bash -c 'until curl -s http://localhost:11434/api/tags | grep -q "all-minilm"; do sleep 5; done'

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test
        env:
          EMBEDDING_PROVIDER: ollama
          EMBEDDING_MODEL: all-minilm
          OLLAMA_URL: http://localhost:11434

      - name: Build
        run: npm run build

  release:
    name: Release
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-22-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-22-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install --no-package-lock --prefer-offline

      - name: Build all packages
        run: npm run build

      - name: Release MCP Package
        run: |
          cd apps/mcp-knowledge-graph
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Package VS Code Extension
        run: |
          cd apps/vscode-extension
          npm run package

      - name: Release VS Code Extension
        run: |
          cd apps/vscode-extension
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
